// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UberAPI.Models;

namespace UberAPI.Migrations
{
    [DbContext(typeof(UberContext))]
    [Migration("20210625132754_removedPassField")]
    partial class removedPassField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UberAPI.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ContactNumber")
                        .HasColumnType("decimal(10,0)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins", "Admins");
                });

            modelBuilder.Entity("UberAPI.Models.ApplicableIncentive", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<long>("IncentiveId")
                        .HasColumnType("bigint")
                        .HasColumnName("IncentiveID");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.HasIndex("DriverId");

                    b.HasIndex("IncentiveId");

                    b.ToTable("ApplicableIncentives", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.ApplicableOffer", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("OfferId")
                        .HasColumnType("bigint")
                        .HasColumnName("OfferID");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.HasIndex("OfferId");

                    b.HasIndex("RiderId");

                    b.ToTable("ApplicableOffers", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.Auth.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("UberAPI.Models.Driver", b =>
                {
                    b.Property<long>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ContactNumber")
                        .HasColumnType("decimal(10,0)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLoggedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SessionExpiresIn")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalRidesCancelled")
                        .HasColumnType("int");

                    b.Property<int>("TotalRidesDone")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DriverId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactNumber" }, "uk_Drivers_ContactNumber")
                        .IsUnique();

                    b.ToTable("Drivers", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.DriverCredential", b =>
                {
                    b.Property<long>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("SessionExpiresIn")
                        .HasColumnType("datetime");

                    b.ToView("DriverCredentials", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.DriverDetail", b =>
                {
                    b.Property<string>("AadharCard")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<string>("DrivingLicense")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherDocument")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PanCard")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PermenantAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverDetails", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.Incentive", b =>
                {
                    b.Property<long>("IncentiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IncentiveID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("IncentiveId");

                    b.ToTable("Incentives", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("LocationId");

                    b.HasIndex(new[] { "Longitude", "Latitude" }, "uk_Locations_Coordinates")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("UberAPI.Models.Offer", b =>
                {
                    b.Property<long>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OfferID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("OfferCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("OfferId");

                    b.ToTable("Offers", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.Rating", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RatingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<string>("MediaAttached")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("RatingOfDriver")
                        .HasColumnType("float")
                        .HasColumnName("Rating");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("TripID");

                    b.HasKey("RatingId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RiderId");

                    b.HasIndex("TripId");

                    b.ToTable("Ratings", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.RatingRider", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RatingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<string>("MediaAttached")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("RatingOfRider")
                        .HasColumnType("float")
                        .HasColumnName("Rating");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("TripID");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__FCCDF85C5A868205");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_Ratings_DriverID1");

                    b.HasIndex("RiderId")
                        .HasDatabaseName("IX_Ratings_RiderID1");

                    b.HasIndex("TripId")
                        .HasDatabaseName("IX_Ratings_TripID1");

                    b.ToTable("Ratings", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.RideType", b =>
                {
                    b.Property<long>("RideTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RideTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("float");

                    b.Property<string>("RideName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.HasKey("RideTypeId");

                    b.ToTable("RideTypes");
                });

            modelBuilder.Entity("UberAPI.Models.Rider", b =>
                {
                    b.Property<long>("RiderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ContactNumber")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLoggedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsNew")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SessionExpiresIn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RiderId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactNumber" }, "uk_Riders_ContactNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "InviteCode" }, "uk_Riders_InviteCode")
                        .IsUnique();

                    b.ToTable("Riders", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.RiderCredential", b =>
                {
                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("RiderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("SessionExpiresIn")
                        .HasColumnType("datetime");

                    b.ToView("RiderCredentials", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.SavedPaymentMode", b =>
                {
                    b.Property<DateTime>("CardDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("CardNumber")
                        .HasColumnType("decimal(16,0)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.HasIndex("RiderId");

                    b.ToTable("SavedPaymentModes", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.Trip", b =>
                {
                    b.Property<long>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TripID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("ActualFairAmount")
                        .HasColumnType("float");

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DestinationLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("DestinationLocationID");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EstimatedFairAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("RideTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RideTypeID");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.Property<long>("SourceLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourceLocationID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TripId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RideTypeId");

                    b.HasIndex("RiderId");

                    b.HasIndex("SourceLocationId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("UberAPI.Models.VCurrentTrip", b =>
                {
                    b.Property<double?>("ActualFairAmount")
                        .HasColumnType("float");

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DestinationLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("DestinationLocationID");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EstimatedFairAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("RideTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RideTypeID");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID");

                    b.Property<long>("SourceLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourceLocationID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TripID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToView("vCurrentTrips");
                });

            modelBuilder.Entity("UberAPI.Models.VDriver", b =>
                {
                    b.Property<decimal>("ContactNumber")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.ToView("vDrivers", "Drivers");
                });

            modelBuilder.Entity("UberAPI.Models.VRider", b =>
                {
                    b.Property<decimal>("ContactNumber")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InviteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("RiderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RiderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToView("vRiders", "Riders");
                });

            modelBuilder.Entity("UberAPI.Models.VTripsData", b =>
                {
                    b.Property<double?>("ActualFairAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DestinationLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("EstimatedFairAmount")
                        .HasColumnType("float");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RideName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RiderId")
                        .HasColumnType("bigint");

                    b.Property<string>("RiderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TripID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VehicleBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vTripsData");
                });

            modelBuilder.Entity("UberAPI.Models.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("CurrentRideTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrentRideTypeID");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverID");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VehicleDocument")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("CurrentRideTypeId");

                    b.HasIndex("DriverId");

                    b.ToTable("Vehicles", "Drivers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UberAPI.Models.Admin", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UberAPI.Models.ApplicableIncentive", b =>
                {
                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_ApplicableIncentives_DriverID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Incentive", "Incentive")
                        .WithMany()
                        .HasForeignKey("IncentiveId")
                        .HasConstraintName("fk_ApplicableIncentives_IncentiveID")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Incentive");
                });

            modelBuilder.Entity("UberAPI.Models.ApplicableOffer", b =>
                {
                    b.HasOne("UberAPI.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .HasConstraintName("fk_ApplicableOffers_OfferID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .HasConstraintName("fk_ApplicableOffers_RiderID")
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("UberAPI.Models.Driver", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UberAPI.Models.DriverDetail", b =>
                {
                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_DriverDetails_DriverID");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("UberAPI.Models.Rating", b =>
                {
                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany("Ratings")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_Ratings_DriverID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Rider", "Rider")
                        .WithMany("Ratings")
                        .HasForeignKey("RiderId")
                        .HasConstraintName("fk_Ratings_RiderID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_Ratings_TripID")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Rider");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("UberAPI.Models.RatingRider", b =>
                {
                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany("RatingRiders")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_Ratings_DriverID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Rider", "Rider")
                        .WithMany("RatingRiders")
                        .HasForeignKey("RiderId")
                        .HasConstraintName("fk_Ratings_RiderID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Trip", "Trip")
                        .WithMany("RatingRiders")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_Ratings_TripID")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Rider");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("UberAPI.Models.Rider", b =>
                {
                    b.HasOne("UberAPI.Models.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UberAPI.Models.SavedPaymentMode", b =>
                {
                    b.HasOne("UberAPI.Models.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .HasConstraintName("fk_SavedPaymentModes_RiderID");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("UberAPI.Models.Trip", b =>
                {
                    b.HasOne("UberAPI.Models.Location", "DestinationLocation")
                        .WithMany("TripDestinationLocations")
                        .HasForeignKey("DestinationLocationId")
                        .HasConstraintName("fk_Trips_DestinationLocationID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_Trips_DriverID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.RideType", "RideType")
                        .WithMany("Trips")
                        .HasForeignKey("RideTypeId")
                        .HasConstraintName("fk_Trips_RideTypeID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Rider", "Rider")
                        .WithMany("Trips")
                        .HasForeignKey("RiderId")
                        .HasConstraintName("fk_Trips_RiderID")
                        .IsRequired();

                    b.HasOne("UberAPI.Models.Location", "SourceLocation")
                        .WithMany("TripSourceLocations")
                        .HasForeignKey("SourceLocationId")
                        .HasConstraintName("fk_Trips_SourceLocationID")
                        .IsRequired();

                    b.Navigation("DestinationLocation");

                    b.Navigation("Driver");

                    b.Navigation("Rider");

                    b.Navigation("RideType");

                    b.Navigation("SourceLocation");
                });

            modelBuilder.Entity("UberAPI.Models.Vehicle", b =>
                {
                    b.HasOne("UberAPI.Models.RideType", "CurrentRideType")
                        .WithMany("Vehicles")
                        .HasForeignKey("CurrentRideTypeId")
                        .HasConstraintName("fk_Vehicles_CurrentRideTypeID");

                    b.HasOne("UberAPI.Models.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_Vehicles_DriverID")
                        .IsRequired();

                    b.Navigation("CurrentRideType");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("UberAPI.Models.Driver", b =>
                {
                    b.Navigation("RatingRiders");

                    b.Navigation("Ratings");

                    b.Navigation("Trips");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("UberAPI.Models.Location", b =>
                {
                    b.Navigation("TripDestinationLocations");

                    b.Navigation("TripSourceLocations");
                });

            modelBuilder.Entity("UberAPI.Models.RideType", b =>
                {
                    b.Navigation("Trips");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("UberAPI.Models.Rider", b =>
                {
                    b.Navigation("RatingRiders");

                    b.Navigation("Ratings");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("UberAPI.Models.Trip", b =>
                {
                    b.Navigation("RatingRiders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
