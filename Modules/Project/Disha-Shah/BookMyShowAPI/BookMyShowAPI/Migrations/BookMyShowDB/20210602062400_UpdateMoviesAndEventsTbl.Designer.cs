// <auto-generated />
using System;
using BookMyShowAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookMyShowAPI.Migrations.BookMyShowDB
{
    [DbContext(typeof(BookMyShowDBContext))]
    [Migration("20210602062400_UpdateMoviesAndEventsTbl")]
    partial class UpdateMoviesAndEventsTbl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookMyShowAPI.Models.Activity", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Activities");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certification1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Certification");

                    b.HasKey("CertificationId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Comedy", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Comedys");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("ArtistImage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ArtistName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Disclaimer")
                        .HasMaxLength(20000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("FAQs")
                        .HasMaxLength(20000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("MinAge")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(10000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TermsAndConditions")
                        .HasMaxLength(20000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("EventVenueShowTimingId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventBooking", b =>
                {
                    b.Property<int>("EventBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeSpan>("ShowTiming")
                        .HasColumnType("time");

                    b.Property<byte>("TicketCount")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.HasKey("EventBookingId");

                    b.ToTable("EventBookings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventLanguage", b =>
                {
                    b.Property<int>("EventLanguage1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventLanguage")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("EventLanguage1")
                        .HasName("EventLanguages_EventLanguageId_PK");

                    b.HasIndex("EventId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EventLanguages");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EventType");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenue", b =>
                {
                    b.Property<int>("EventVenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.HasKey("EventVenueId");

                    b.HasIndex("CityId");

                    b.ToTable("EventVenues");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenueShowTiming", b =>
                {
                    b.Property<int>("EventVenueShowTimingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.HasKey("EventVenueShowTimingId");

                    b.HasIndex("ShowTimingId");

                    b.HasIndex(new[] { "EventVenueId", "ShowTimingId" }, "EventVenueId_ShowTimingId_UK")
                        .IsUnique();

                    b.ToTable("EventVenueShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.FilmCategory", b =>
                {
                    b.Property<int>("FilmCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilmCategory1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FilmCategory");

                    b.HasKey("FilmCategoryId");

                    b.ToTable("FilmCategories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Genre");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Language");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Cast")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("CastImages")
                        .HasMaxLength(10000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("IsPremiere")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("MovieId");

                    b.HasIndex("CertificationId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieBooking", b =>
                {
                    b.Property<int>("MovieBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateToWatch")
                        .HasColumnType("date");

                    b.Property<string>("FilmCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Movie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Screen")
                        .HasColumnType("int");

                    b.Property<string>("SeatNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeSpan>("ShowTiming")
                        .HasColumnType("time");

                    b.Property<string>("Theatre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("TotalTickets")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.HasKey("MovieBookingId");

                    b.ToTable("MovieBookings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieFilmCategory", b =>
                {
                    b.Property<int>("MovieFilmcategory1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieFilmcategory")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("MovieFilmcategory1")
                        .HasName("MovieFilmCategories_MovieFilmCategory_PK");

                    b.HasIndex("FilmCategoryId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieFilmCategories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieGenre1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieGenre")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("MovieGenre1")
                        .HasName("MovieGenres_MovieGenre_PK");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieLanguage", b =>
                {
                    b.Property<int>("MovieLanguage1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieLanguage")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("MovieLanguage1")
                        .HasName("MovieLanguages_MovieLanguage_PK");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLanguages");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Outdoor", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Outdoors");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Play", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Plays");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Popular", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Populars");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Screen", b =>
                {
                    b.Property<int>("ScreenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.HasKey("ScreenId");

                    b.HasIndex("TheatreId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreenSeatsCategory", b =>
                {
                    b.Property<int>("ScreenSeatsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ScreenSeatsCategoryId");

                    b.HasIndex("SeatsCategoryId");

                    b.HasIndex(new[] { "ScreenId", "SeatsCategoryId" }, "ScreenId_SeatsCategoryId_UK")
                        .IsUnique();

                    b.ToTable("ScreenSeatsCategories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreenShowTiming", b =>
                {
                    b.Property<int>("ScreenShowTimingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.HasKey("ScreenShowTimingsId")
                        .HasName("ScreenShowTimings_ScreenShowTimingsId_PK");

                    b.HasIndex("ShowTimingId");

                    b.HasIndex(new[] { "ScreenId", "ShowTimingId" }, "ScreenId_ShowTimingId_UK")
                        .IsUnique();

                    b.ToTable("ScreenShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreensMovie", b =>
                {
                    b.Property<int>("ScreenMovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.HasKey("ScreenMovieId")
                        .HasName("ScreensMovies_ScreenMovieId_PK");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreensMovies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Seat", b =>
                {
                    b.Property<int>("SeatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<string>("RowNo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.Property<int?>("SeatsCategoryId")
                        .HasColumnType("int");

                    b.HasKey("SeatsId")
                        .HasName("Seats_SeatsId_PK");

                    b.HasIndex("SeatsCategoryId");

                    b.HasIndex(new[] { "RowNo", "SeatNo" }, "RowNo_SeatNo_UK")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.SeatsCategory", b =>
                {
                    b.Property<int>("SeatsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("SeatsCategoryId");

                    b.ToTable("SeatsCategories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ShowTiming", b =>
                {
                    b.Property<int>("ShowTimingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.HasKey("ShowTimingId");

                    b.ToTable("ShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Sport", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("Sports");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Theatre", b =>
                {
                    b.Property<int>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TheatreId");

                    b.HasIndex("CityId");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.TheatreShowTiming", b =>
                {
                    b.Property<int>("TheatreShowTimingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.HasKey("TheatreShowTimingId");

                    b.HasIndex("ShowTimingId");

                    b.HasIndex(new[] { "TheatreId", "ShowTimingId" }, "TheatreId_ShowTimingId_UK")
                        .IsUnique();

                    b.ToTable("TheatreShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.TheatresMovie", b =>
                {
                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("FilmCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FilmCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPremiere")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Movie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenSeatsCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SeatCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Seat Category");

                    b.Property<string>("SeatNo")
                        .HasMaxLength(41)
                        .IsUnicode(false)
                        .HasColumnType("varchar(41)")
                        .HasColumnName("Seat No");

                    b.Property<int>("SeatsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Theatre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable("TheatresMovies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VBookingHistory", b =>
                {
                    b.Property<DateTime>("DateOfShow")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Screen")
                        .HasColumnType("int");

                    b.Property<string>("SeatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ShowTiming")
                        .HasColumnType("time");

                    b.Property<byte>("TotalTickets")
                        .HasColumnType("tinyint");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VBookingHistories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VCitiesRegion", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.ToView("vCitiesRegions");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VEvent", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<int>("EventVenueShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("vEvents");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VEventVenuesCity", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("vEventVenuesCities");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VEventVenuesShowtime", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Event Venue");

                    b.Property<int>("EventVenueId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.ToView("vEventVenuesShowtimes");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VMovie", b =>
                {
                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("FilmCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FilmCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("IsPremiere")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToView("vMovies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VSeatCategorySeat", b =>
                {
                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("SeatCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Seat Category");

                    b.Property<string>("SeatNo")
                        .HasMaxLength(41)
                        .IsUnicode(false)
                        .HasColumnType("varchar(41)")
                        .HasColumnName("Seat No");

                    b.Property<int>("SeatsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsId")
                        .HasColumnType("int");

                    b.ToView("vSeatCategorySeats");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VTheatresCity", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.ToView("vTheatresCities");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VTheatresScreensSeat", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenSeatsCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SeatCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Seat Category");

                    b.Property<string>("SeatNo")
                        .HasMaxLength(41)
                        .IsUnicode(false)
                        .HasColumnType("varchar(41)")
                        .HasColumnName("Seat No");

                    b.Property<int>("SeatsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Theatre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.ToView("vTheatresScreensSeats");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.VTheatresShowtime", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<int>("ShowTimingId")
                        .HasColumnType("int");

                    b.Property<string>("Theatre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int");

                    b.ToView("vTheatresShowtimes");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.City", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("Regions_RegionID_FK");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Event", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("EventTypes_EventTypeId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.EventVenueShowTiming", "EventVenueShowTiming")
                        .WithMany("Events")
                        .HasForeignKey("EventVenueShowTimingId")
                        .HasConstraintName("EventVenueShowTimings_EventVenueShowTimingId_FK")
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("EventVenueShowTiming");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventLanguage", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Event", "Event")
                        .WithMany("EventLanguages")
                        .HasForeignKey("EventId")
                        .HasConstraintName("EventLanguages_Events_EventId_FK");

                    b.HasOne("BookMyShowAPI.Models.Language", "Language")
                        .WithMany("EventLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("EventLanguages_Languages_LanguageID_FK");

                    b.Navigation("Event");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenue", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.City", "City")
                        .WithMany("EventVenues")
                        .HasForeignKey("CityId")
                        .HasConstraintName("EventVenues_Cities_CityId_FK")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenueShowTiming", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.EventVenue", "EventVenue")
                        .WithMany("EventVenueShowTimings")
                        .HasForeignKey("EventVenueId")
                        .HasConstraintName("EventvenueShowTimings_EventVenues_EventVenueId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.ShowTiming", "ShowTiming")
                        .WithMany("EventVenueShowTimings")
                        .HasForeignKey("ShowTimingId")
                        .HasConstraintName("EventVenueShowTimings_ShowTimings_ShowTimingId_FK")
                        .IsRequired();

                    b.Navigation("EventVenue");

                    b.Navigation("ShowTiming");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Movie", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Certification", "Certification")
                        .WithMany("Movies")
                        .HasForeignKey("CertificationId")
                        .HasConstraintName("Certifications_CertificationId_FK")
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieFilmCategory", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.FilmCategory", "FilmCategory")
                        .WithMany("MovieFilmCategories")
                        .HasForeignKey("FilmCategoryId")
                        .HasConstraintName("MovieFilmCategories_FilmCategories_FilmCategoryId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.Movie", "Movie")
                        .WithMany("MovieFilmCategories")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("MovieFilmCategories_Movies_MovieId_FK")
                        .IsRequired();

                    b.Navigation("FilmCategory");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieGenre", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("MovieGenres_Genres_GenreId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("MovieGenres_Movies_MovieId_FK")
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.MovieLanguage", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Language", "Language")
                        .WithMany("MovieLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("MovieLanguages_Languages_LanguageId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.Movie", "Movie")
                        .WithMany("MovieLanguages")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("MovieLanguages_Movies_MovieId_FK")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Screen", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Theatre", "Theatre")
                        .WithMany("Screens")
                        .HasForeignKey("TheatreId")
                        .HasConstraintName("Theatres_TheatreId_FK")
                        .IsRequired();

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreenSeatsCategory", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Screen", "Screen")
                        .WithMany("ScreenSeatsCategories")
                        .HasForeignKey("ScreenId")
                        .HasConstraintName("ScreenSeatsCategories_Screens_ScreenId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.SeatsCategory", "SeatsCategory")
                        .WithMany("ScreenSeatsCategories")
                        .HasForeignKey("SeatsCategoryId")
                        .HasConstraintName("ScreenSeatsCategories_SeatsCategories_SeatsCategoryId_FK")
                        .IsRequired();

                    b.Navigation("Screen");

                    b.Navigation("SeatsCategory");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreenShowTiming", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Screen", "Screen")
                        .WithMany("ScreenShowTimings")
                        .HasForeignKey("ScreenId")
                        .HasConstraintName("ScreenShowTimings_Screens_ScreenId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.ShowTiming", "ShowTiming")
                        .WithMany("ScreenShowTimings")
                        .HasForeignKey("ShowTimingId")
                        .HasConstraintName("ScreenShowTimings_ShowTimings_ShowTimingId_FK")
                        .IsRequired();

                    b.Navigation("Screen");

                    b.Navigation("ShowTiming");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ScreensMovie", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.Movie", "Movie")
                        .WithMany("ScreensMovies")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("ScreensMovies_MOvies_MovieId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.Screen", "Screen")
                        .WithMany("ScreensMovies")
                        .HasForeignKey("ScreenId")
                        .HasConstraintName("ScreensMovies_Screens_ScreenId_FK")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Seat", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.SeatsCategory", "SeatsCategory")
                        .WithMany("Seats")
                        .HasForeignKey("SeatsCategoryId")
                        .HasConstraintName("SeatsCategories_SeatsCategoryID_FK");

                    b.Navigation("SeatsCategory");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Theatre", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.City", "City")
                        .WithMany("Theatres")
                        .HasForeignKey("CityId")
                        .HasConstraintName("Cities_CityId_FK")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.TheatreShowTiming", b =>
                {
                    b.HasOne("BookMyShowAPI.Models.ShowTiming", "ShowTiming")
                        .WithMany("TheatreShowTimings")
                        .HasForeignKey("ShowTimingId")
                        .HasConstraintName("TheatreShowTimings_ShowTimings_ShowTimingId_FK")
                        .IsRequired();

                    b.HasOne("BookMyShowAPI.Models.Theatre", "Theatre")
                        .WithMany("TheatreShowTimings")
                        .HasForeignKey("TheatreId")
                        .HasConstraintName("TheatreShowTimings_Theatres_TheatreId_FK")
                        .IsRequired();

                    b.Navigation("ShowTiming");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Certification", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.City", b =>
                {
                    b.Navigation("EventVenues");

                    b.Navigation("Theatres");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Event", b =>
                {
                    b.Navigation("EventLanguages");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenue", b =>
                {
                    b.Navigation("EventVenueShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.EventVenueShowTiming", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.FilmCategory", b =>
                {
                    b.Navigation("MovieFilmCategories");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Language", b =>
                {
                    b.Navigation("EventLanguages");

                    b.Navigation("MovieLanguages");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Movie", b =>
                {
                    b.Navigation("MovieFilmCategories");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieLanguages");

                    b.Navigation("ScreensMovies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Screen", b =>
                {
                    b.Navigation("ScreenSeatsCategories");

                    b.Navigation("ScreenShowTimings");

                    b.Navigation("ScreensMovies");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.SeatsCategory", b =>
                {
                    b.Navigation("ScreenSeatsCategories");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.ShowTiming", b =>
                {
                    b.Navigation("EventVenueShowTimings");

                    b.Navigation("ScreenShowTimings");

                    b.Navigation("TheatreShowTimings");
                });

            modelBuilder.Entity("BookMyShowAPI.Models.Theatre", b =>
                {
                    b.Navigation("Screens");

                    b.Navigation("TheatreShowTimings");
                });
#pragma warning restore 612, 618
        }
    }
}
